This was the hardest part of my project, as there were many ways to complete this task, but I wanted it done as if this were an application downloaded from the internet

Step 1. Have Python launch a new command prompt upon startup, and start itself through there, 

	Functions to try:
	import subprocess: Allows python to launch child processes, and interact with inputs and outputs, system commands, and execute them within python script.
	
	Launch a new command prompt window in the background and execute the Python script
	subprocess.Popen(["start", "cmd", "/c", "python", "script.py"], shell=True)

	execution will continue after launching the command prompt window


Step 2. Auto-close the command prompt, but still keep the python file executing

def add_to_startup(file_path):
    # Open the "Run" key in the Windows Registry
    with winreg.OpenKey(winreg.HKEY_CURRENT_USER, "Software\\Microsoft\\Windows\\CurrentVersion\\Run", 0, winreg.KEY_SET_VALUE) as key:
        # Set the value of the Python script to the specified file path
        winreg.SetValueEx(key, "DailyDesktopBackgroundRotatorTest.py", 0, winreg.REG_SZ, file_path)

# Replace "script.py" with the path to your Python script file
script_path = r"C:\Users\Livvy\OneDrive\000\PythonProjects\WindowsBackgroundRotator\DailyDesktopBackgroundRotatorTest.py"

# Add the Python script to the Windows startup
add_to_startup(script_path)

# Launch the Python script in the background
subprocess.Popen(["pythonw", script_path], shell=True)


Later, I researched pythonw (.pyw) A type of python file that could run without the command prompt.

I decide to use this, and use more commands python can use to manipulate windows, such as:

ctypes.windll.shell32.IsUserAnAdmin(), To make sure the User has admin perms before running (Windows won't allowregistry to be editted without admin.)

I also had the function meant to move DailyDesktopBackgroundRotator.pyw to the registry so it could autorun when the user logs in placed into another file (Startie.pyw) 


ef add_to_startup(file_path):
    # Open the "Run" key in the registry
    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"SOFTWARE\Microsoft\Windows\CurrentVersion\Run", 0, winreg.KEY_ALL_ACCESS)

    # Set the path of the script to be run on startup
    winreg.SetValueEx(key, "DailyDesktopBackgroundRotator", 0, winreg.REG_SZ, file_path)

    # Close the registry key
    winreg.CloseKey(key)
	
	The above section of code is used to open the registry access point, so we can edit (add in DailyDesktopBackgroundRotator.pyw path)
	and close with winreg.CloseKey(key) in order to avoid resource leaks.
	
	if __name__ == "__main__":
    # Specify the path to the script you want to add to startup
    script_path = r"C:\insert\script\path\here\WindowsBackgroundRotator\DailyDesktopBackgroundRotator.pyw"

    # Add the script to startup
    add_to_startup(script_path)

    # Run the script immediately
    os.startfile(script_path)
	
	this section above is meant to specify where the DailyDesktopBackgroundRotator script is as variable script_path, and plug that into our two functions so 
	Python knows where our script is.